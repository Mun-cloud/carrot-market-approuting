generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String?      @unique
  password     String?
  phone        String?      @unique
  github_id    String?      @unique
  avatar       String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  comments     Comment[]
  likes        Like[]
  live_streams LiveStream[]
  messages     Message[]
  posts        Post[]
  products     Product[]
  tokens       SMSToken[]
  chat_rooms   ChatRoom[]   @relation("ChatRoomToUser")
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  userId      Int
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId], name: "id")
}

model ChatRoom {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  users      User[]    @relation("ChatRoomToUser")
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chatRoomId String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  replay_id  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
